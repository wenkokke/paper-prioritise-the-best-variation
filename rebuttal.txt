We thank the reviewers for their thorough reviews and very useful feedback, which we'll address as follows.

First of all, we acknowledge the lack of examples and we commit to adding them to the potential final version.
We will illustrate PGV by adding examples for each of the following:

  - deadlock-free processes—including the streamlined version with two processes connected by two sessions, suggested by Reviewer 1—together with their typing derivations;
  - deadlocked processes that cannot be typed, thus illustrating how priorities work, suggested by Reviewers 1 and 2;
  - processes which use closures, thus illustrating the relevance of annotations on arrow types, suggested by Reviewer 1;
  - processes demonstrating the interaction between higher order and deadlock freedom, suggested by Reviewer 2.

Regarding the cyclic scheduler, we included it to deliberately connect our work to the previous FoSSaCS work on PCP where the cyclic scheduler was originally presented as an example of a deadlock-free process not typable in CP.
In our work, we wanted to show how the well-known Milner's scheduler can be written in PGV-for the first time-and use it to illustrate our encoding from PCP to PGV, thus closing the circle on the cyclic scheduler example.
We will make this more explicit in the paper.

Regarding our contributions, we will highlight them better in the introduction. Summing them up here:
  1. PGV is the first session-typed functional language with priorities *and* strong ties to linear logic via its correspondence with PCP and its relation to the CP and GV languages.
  2. PGV addresses several problems in the original GV language, most notably:
    a. our version does not have the pseudo-type S^#; and
    b. our structural congruence is type preserving.
  3. The connection of PGV to logic is given via a sound and complete encoding of PCP to PGV and showcase it with the encoding of cyclic scheduler to PGV.

We would like to draw attention to a. and b. above.
Previous work on GV does not satisfy a. and the pseudo-type S^# is explicitly included in the type language, but then explicitly excluded in all the typing rules where only "concrete" types, like (input) ?S or (output) !S can be used. Consequently, the technical presentation is cumbersome in original GV. Another major issue with GV is that structural congruence is not type preserving. Consequently, in order to prove the main results in GV, one would first need to prove that: any ill-typed term which is obtained via structural congruence (or reduction) starting from a well-typed term, can be rewritten into a well-typed term. In our work, the type preserving structural congruence makes the presentation cleaner and more elegant and aligns for example with structural congruence in process calculi.

Lastly, we will implement all "minor comments" by all reviewers, thanks for pointing them out.

----------------------- REVIEW 1 ---------------------
Regarding the overlap with [37] we would like to point out that our work was developed completely independently of [37]. The authors were not aware of[37] until working on the related work of this paper.
We still want to emphasise the differences between our work and [37], which we will also state in the paper:

  - PGV has a clear correspondence with a *process calculus*, PCP;
  - PGV has strong ties to *linear logic*, via its correspondence to PCP and its transitive relation to CP;


Regarding M_i and N_i in the PCP cyclic scheduler, the reviewer understood this correctly and we will simply state that what matters is the communication structure being modelled.
The missing `wait d'` should be in N_1, as the reviewer correctly inferred. Moreover, with this change the process is well typed. We will clarify this in the paper.

Regarding the encoding of PCP to PGV and presenting only the encoding to the functional fragment, we have thought about this too. Such an encoding is complete but not sound, as the translation to configurations does some evaluation of top-level new/spawn constructs. For instance, the process ‘x[y].P’ has no reductions. Similarly, its translation to a configuration has no reductions. However, its translation to a term, ‘o let (y,z) = new in let x = send (z,x) in ((P))_M’ can reduce to ‘(vyz)(o let x = send (z,x) in ((P))_M)’.

Minor:

Regarding side conditions in SC-RESCOMM and E-NEW, the reviewer is right and we will add them.

Regarding T-VAR and T-CONST we will mention your suggestion. Thanks

----------------------- REVIEW 2 ---------------------

As mentioned at the top of this letter, we will add more examples in the paper.

Regarding the presentation of the main sections: we will explain more in detail how priorities work, especially with the aid of the aforementioned examples. We will systematise the prevention of CP, PCP, GV and PGV, by dedicating subsections to each of them before diving into the details of our work.

Regarding our contribution, we will make them clearer for non-experts, which we summarised at the top of the letter. We will illustrate the use and benefits of GV and then the benefits of splitting new and spawn in PGV and its ties to logic (this will relate to the CP,PCP,GV,PGV explanations that we will add).

----------------------- REVIEW 3 ---------------------

We will clarify the contributions better, this was also suggested by other reviewers and we summarised them at the top.

A key contribution of our work is the connection of PGV with logic, which we make explicit by defining a sound and complete encoding of PCP to PGV. Furthermore, as a case study for PGV and the encoding, we deliberately chose Milner's cyclic scheduler presented in PCP.

As mentioned, in addition to the cyclic scheduler, we will add the examples at the top of this letter to better illustrate PGV and its type system.
