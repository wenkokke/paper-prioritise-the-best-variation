We thank the reviewers for their thorough reviews and very useful feedback.

First of all, we acknowledge the lack of examples and we commit to adding them. We will illustrate PGV with further well-typed programs together with type derivation; and deadlocked programs (including the example by Reviewer 1).

The reason for including cyclic scheduler was deliberately to connect our work to the previous FoSSaCS work on PCP. We wanted to show how the well-known Milner's scheduler can be written in PGV (for the first time) and use it to illustrate our encoding of PGV to PCP, thus closing this circle.

We will clarify our contributions in the introduction. Summing them up here: PGV is the first session-typed functional language with priorities *and* strong ties to linear logic via its correspondence with PCP and its relation to the CP and GV languages.


----------------------- REVIEW 1 ---------------------

> Also, I don't understand what M_i and N_i are (similarly for P_i and Q_i in the PCP version of the example). Maybe the authors imply that the actual system is more complex that the one shown here, where M_i and N_i contain unspecified parts of the system. However, I think that the example is already more complex than necessary, and that it would be fine to simply state that all that matters is the communication structure being modeled.

That’s exactly what they’re meant to convey, yes.

> Speaking of complexity, the case for PGV can be made by considering
>
>  	(aa')(bb') (close a; wait b' || wait a'; close b)
>
> which is a streamlined version of the example in which there are just two processes connected by two sessions. This is the essential configuration that cannot be modeled by the calculi strictly based on linear logic, since the two threads share two channels. Yet, this configuration is well typed in the presented type system and therefore is deadlock free.
>
> This example is simple enough that a full typing derivation can be shown in the paper, possibly at the expense of the few proof sketched which can be moved in the appendix anyway.

That’s probably a good call.

> At the same time, the example given by the authors does not make use of any interesting function (apart from the constants wait and close) and therefore it fails to illustrate the relevance of annotations on arrow types.

We should probably add an example which uses closures.

> I presume there are side conditions in SC-RESCOMM requiring that {z,w} \cap {x,y} = \emptyset.
> I presume there are side conditions in E-NEW requiring that x,y do not occur free in F

Yes, to both.

> The encoding from PCP to PGV is routine and does not reveal particularly challenging or surprising aspects given the expressiveness of PGV. In fact, I suspect it can be further simplified (at least in its presentation) by considering only the encoding into the functional fragment of PGV. Clearly the translation to configurations deals with a subset of cases compared to the translation to terms. I wonder if it's possible to *present* the second translation only, which alone is complete as far as the encoding goes.

Such a translation would be complete, but not sound.


----------------------- REVIEW 2 ---------------------

The paper fits well the scope of FOSSACS.

> Counter-examples, i.e., deadlocking processes that cannot be typed, such as dining philosophers.

Yes.

> At least one example demonstrating the interaction between higher order and deadlock-freedom, i.e., an example in which a function is sent and applied and where the actions present in the function's body are controlled by the latent effect of the arrow type.

Yes.

----------------------- REVIEW 3 ---------------------

> As a non-expert reviewing the paper, my main concern is the amount of novel technical content: the technique in use has been developed by one of the authors in the context of a process calculus and is adapted here to a known linear concurrent λ-calculus. This would not be an issue if the attempt exposed some technical difficulties in adapting the technique to the setting of GV or uncovered some important insights; however, this does not seem to be the case. Thus, from the perspective of a non-expert, this paper seems to be too closely related to prior work to warrant an acceptance recommendation. Still, particularly as a non-expert, I would welcome any comments that would highlight the significance of technical contributions of the paper, and if so, would be happy to adjust my assessment.
